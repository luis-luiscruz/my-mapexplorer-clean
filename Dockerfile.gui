# Docker build for MapExplorer with GUI support (non-headless Chrome)
# Supports Python, Selenium, Chrome with GUI, Node.js backend and Vue.js frontend

# Stage 1: Build Vue.js frontend
FROM node:18-alpine AS frontend-builder

WORKDIR /app/frontend

# Copy frontend package files
COPY package*.json postcss.config.js tailwind.config.js vite.config.ts tsconfig*.json ./

# Install frontend dependencies (including dev dependencies for build)
RUN npm ci --silent

# Copy frontend source code
COPY src/ ./src/
COPY public/ ./public/
COPY index.html ./

# Build frontend for production
RUN npm run build

# Stage 2: Install backend dependencies
FROM node:18-alpine AS backend-deps

WORKDIR /app/backend

# Copy backend package files
COPY backend/package*.json ./

# Install backend dependencies
RUN npm ci --only=production --silent

# Stage 3: Final runtime image with GUI support
FROM ubuntu:22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV NODE_ENV=production
ENV PORT=3010
ENV DISPLAY=:99
ENV CHROME_BIN=/usr/bin/google-chrome
ENV CHROME_PATH=/usr/bin/google-chrome
ENV DOCKER_ENV=true

# Install system dependencies for GUI support
RUN apt-get update && apt-get install -y \
    # Node.js 18
    curl \
    gnupg2 \
    && curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs \
    # Python and pip
    python3 \
    python3-pip \
    # Chrome and GUI dependencies
    wget \
    gnupg \
    ca-certificates \
    apt-transport-https \
    software-properties-common \
    # X11 and VNC for GUI support
    xvfb \
    x11vnc \
    fluxbox \
    x11-utils \
    xauth \
    dbus-x11 \
    # Additional GUI libraries
    libx11-6 \
    libxcomposite1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxrandr2 \
    libxrender1 \
    libxss1 \
    libxtst6 \
    libnss3 \
    libgconf-2-4 \
    libxss1 \
    libasound2 \
    libatk-bridge2.0-0 \
    libdrm2 \
    libgtk-3-0 \
    # Chrome dependencies
    fonts-liberation \
    libappindicator3-1 \
    xdg-utils \
    && rm -rf /var/lib/apt/lists/*

# Install Google Chrome
RUN wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list \
    && apt-get update \
    && apt-get install -y google-chrome-stable \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Copy built frontend from stage 1
COPY --from=frontend-builder /app/frontend/dist ./dist

# Copy backend source and dependencies from stage 2
COPY --from=backend-deps /app/backend/node_modules ./backend/node_modules
COPY backend/ ./backend/

# Copy requirements and install Python packages
COPY requirements.txt ./
RUN pip3 install --no-cache-dir -r requirements.txt && rm requirements.txt

# Copy startup script
COPY start-gui.sh /app/start.sh
RUN chmod +x /app/start.sh

# Create non-root user for security
RUN groupadd -g 1001 appuser \
    && useradd -r -u 1001 -g appuser appuser \
    && chown -R appuser:appuser /app \
    && mkdir -p /home/appuser/.vnc \
    && chown -R appuser:appuser /home/appuser

# Switch to non-root user
USER appuser

# Expose ports (3010 for app, 5900 for VNC)
EXPOSE 3010 5900

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3010 || exit 1

# Start the application with GUI support
CMD ["/app/start.sh"]
