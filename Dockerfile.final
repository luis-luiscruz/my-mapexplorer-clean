# Final optimized Docker build for MapExplorer
# Uses Alpine Linux for minimal size with full tool compatibility

# Stage 1: Build Vue.js frontend
FROM node:18-alpine AS frontend-builder

WORKDIR /app/frontend

# Copy frontend package files
COPY package*.json postcss.config.js tailwind.config.js vite.config.ts tsconfig*.json ./

# Install frontend dependencies (including dev dependencies for build)
RUN npm ci --silent

# Copy frontend source code
COPY src/ ./src/
COPY public/ ./public/
COPY index.html ./

# Build frontend for production
RUN npm run build

# Stage 2: Install backend dependencies
FROM node:18-alpine AS backend-deps

WORKDIR /app/backend

# Copy backend package files
COPY backend/package*.json ./

# Install backend dependencies
RUN npm ci --only=production --silent

# Stage 3: Final runtime image - optimized Alpine
FROM node:18-alpine

# Install system dependencies in a single layer
RUN apk add --no-cache \
    python3 \
    py3-pip \
    chromium \
    chromium-chromedriver \
    curl \
    bash \
    && rm -rf /var/cache/apk/*

# Create app directory
WORKDIR /app

# Copy built frontend from stage 1
COPY --from=frontend-builder /app/frontend/dist ./dist

# Copy backend source and dependencies from stage 2
COPY --from=backend-deps /app/backend/node_modules ./backend/node_modules
COPY backend/ ./backend/

# Copy requirements and install Python packages
COPY requirements-alpine.txt ./
RUN pip3 install --no-cache-dir --break-system-packages -r requirements-alpine.txt \
    && rm requirements-alpine.txt

# Copy startup script
COPY start-slim.sh /app/start.sh
RUN chmod +x /app/start.sh

# Create non-root user for security
RUN addgroup -g 1001 -S appuser \
    && adduser -S appuser -u 1001 -G appuser \
    && chown -R appuser:appuser /app

# Set environment variables
ENV NODE_ENV=production \
    PORT=3010 \
    CHROME_BIN=/usr/bin/chromium-browser \
    CHROME_PATH=/usr/bin/chromium-browser \
    CHROMIUM_PATH=/usr/bin/chromium-browser \
    DOCKER_ENV=true

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 3010

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3010 || exit 1

# Start the application
CMD ["/app/start.sh"]
