# Ultra-optimized Docker build for MapExplorer using distroless
# Minimal image size while supporting Python, Chrome, Node.js backend and Vue.js frontend

# Stage 1: Build Vue.js frontend using Alpine
FROM node:18-alpine AS frontend-builder

WORKDIR /app/frontend

# Copy and install frontend dependencies
COPY package*.json postcss.config.js tailwind.config.js vite.config.ts tsconfig*.json ./
RUN npm ci --silent

# Copy frontend source and build
COPY src/ ./src/
COPY public/ ./public/
COPY index.html ./
RUN npm run build && rm -rf node_modules

# Stage 2: Install backend dependencies using Alpine
FROM node:18-alpine AS backend-deps

WORKDIR /app/backend
COPY backend/package*.json ./
RUN npm ci --only=production --silent && npm cache clean --force

# Stage 3: Python requirements installer
FROM python:3.11-alpine AS python-deps

# Install build dependencies
RUN apk add --no-cache gcc musl-dev libxml2-dev libxslt-dev

# Install Python packages to custom location
COPY backend/scripts/requirements.txt ./
RUN pip install --no-cache-dir --target=/opt/python-packages -r requirements.txt

# Stage 4: Chrome installer
FROM alpine:3.18 AS chrome-installer

# Install Chrome in Alpine
RUN apk add --no-cache \
    chromium \
    chromium-chromedriver \
    && mkdir -p /opt/chrome \
    && cp -r /usr/bin/chromium-browser /opt/chrome/ \
    && cp -r /usr/bin/chromedriver /opt/chrome/

# Stage 5: Final ultra-minimal runtime
FROM gcr.io/distroless/python3-debian12:nonroot

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV NODE_ENV=production
ENV PORT=3010
ENV PYTHONPATH="/opt/python-packages"

# Copy Python packages
COPY --from=python-deps /opt/python-packages /opt/python-packages

# Copy Node.js runtime from official image
COPY --from=backend-deps /usr/local/bin/node /usr/local/bin/
COPY --from=backend-deps /usr/local/lib/node_modules /usr/local/lib/node_modules
RUN ln -sf /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm

# Copy Chrome
COPY --from=chrome-installer /opt/chrome /opt/chrome
ENV PATH="/opt/chrome:$PATH"

# Copy application files
WORKDIR /app
COPY --from=frontend-builder /app/frontend/dist ./dist
COPY --from=backend-deps /app/backend/node_modules ./backend/node_modules
COPY backend/ ./backend/

# Copy startup script
COPY start-distroless.sh /app/start.sh

# Expose port
EXPOSE 3010

# Start the application
ENTRYPOINT ["/app/start.sh"]
