# Optimized multi-stage Docker build for MapExplorer using slim images
# Supports Python, Selenium, Chrome, Node.js backend and Vue.js frontend
# Focus on minimal image size

# Stage 1: Build Vue.js frontend using Alpine
FROM node:18-alpine AS frontend-builder

WORKDIR /app/frontend

# Copy frontend package files
COPY package*.json ./
COPY postcss.config.js ./
COPY tailwind.config.js ./
COPY vite.config.ts ./
COPY tsconfig*.json ./

# Install frontend dependencies (including dev dependencies for build)
RUN npm ci --silent && npm cache clean --force

# Copy frontend source code
COPY src/ ./src/
COPY public/ ./public/
COPY index.html ./

# Build frontend for production
RUN npm run build && rm -rf node_modules

# Stage 2: Install backend dependencies using Alpine
FROM node:18-alpine AS backend-deps

WORKDIR /app/backend

# Copy backend package files
COPY backend/package*.json ./

# Install backend dependencies and clean cache
RUN npm ci --only=production --silent && npm cache clean --force

# Stage 3: Python requirements installer
FROM python:3.11-slim AS python-deps

# Install system dependencies needed for Python packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    python3-dev \
    libxml2-dev \
    libxslt-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy and install Python requirements
COPY backend/scripts/requirements.txt ./
RUN pip install --no-cache-dir --target=/opt/python-packages -r requirements.txt

# Stage 4: Final minimal runtime image using Ubuntu slim
FROM ubuntu:22.04-slim

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV NODE_ENV=production
ENV PORT=3010
ENV PATH="/opt/venv/bin:/opt/node/bin:$PATH"
ENV PYTHONPATH="/opt/python-packages"

# Install minimal runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Essential system packages
    ca-certificates \
    curl \
    # Chrome dependencies (minimal set)
    libnss3 \
    libatk-bridge2.0-0 \
    libdrm2 \
    libxcomposite1 \
    libxdamage1 \
    libxrandr2 \
    libgbm1 \
    libxss1 \
    libasound2 \
    # Python 3 runtime
    python3 \
    python3-distutils \
    # Node.js 18.x
    && curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y --no-install-recommends nodejs \
    # Install Chrome browser
    && curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list \
    && apt-get update \
    && apt-get install -y --no-install-recommends google-chrome-stable \
    # Cleanup
    && apt-get purge -y --auto-remove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/*

# Create app directory
WORKDIR /app

# Copy built frontend from stage 1
COPY --from=frontend-builder /app/frontend/dist ./dist

# Copy backend source and dependencies from stage 2
COPY --from=backend-deps /app/backend/node_modules ./backend/node_modules
COPY backend/ ./backend/

# Copy Python packages from stage 3
COPY --from=python-deps /opt/python-packages /opt/python-packages

# Create a non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Copy startup script
COPY start-slim.sh /app/start-slim.sh
RUN chmod +x /app/start-slim.sh

# Set ownership and permissions
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 3010

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3010 || exit 1

# Start the application
CMD ["/app/start-slim.sh"]
